// tslint:disable
/**
 * Symptom Tracker Patient API
 * This is the Patient\'s Client API for the Symptom Tracker 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';


/**
 * PatientApi - axios parameter creator
 * @export
 */
export const PatientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPatient(options: any = {}): RequestArgs {
            const localVarPath = `/patient`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a corresponding patient
         * @param {number} patientId Id of the Patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatient(patientId: number, options: any = {}): RequestArgs {
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling getPatient.');
            }
            const localVarPath = `/patient/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientApi - functional programming interface
 * @export
 */
export const PatientApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPatient(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PatientApiAxiosParamCreator(configuration).addNewPatient(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get a corresponding patient
         * @param {number} patientId Id of the Patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatient(patientId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PatientApiAxiosParamCreator(configuration).getPatient(patientId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PatientApi - factory interface
 * @export
 */
export const PatientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create new patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPatient(options?: any): AxiosPromise<void> {
            return PatientApiFp(configuration).addNewPatient(options)(axios, basePath);
        },
        /**
         * 
         * @summary Get a corresponding patient
         * @param {number} patientId Id of the Patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatient(patientId: number, options?: any): AxiosPromise<void> {
            return PatientApiFp(configuration).getPatient(patientId, options)(axios, basePath);
        },
    };
};

/**
 * PatientApi - object-oriented interface
 * @export
 * @class PatientApi
 * @extends {BaseAPI}
 */
export class PatientApi extends BaseAPI {
    /**
     * 
     * @summary Create new patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public addNewPatient(options?: any) {
        return PatientApiFp(this.configuration).addNewPatient(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get a corresponding patient
     * @param {number} patientId Id of the Patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public getPatient(patientId: number, options?: any) {
        return PatientApiFp(this.configuration).getPatient(patientId, options)(this.axios, this.basePath);
    }

}


/**
 * SymptomsApi - axios parameter creator
 * @export
 */
export const SymptomsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new
         * @param {number} patientId ID patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewSymptoms(patientId: number, options: any = {}): RequestArgs {
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling addNewSymptoms.');
            }
            const localVarPath = `/patient/{patientId}/symptom`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SymptomsApi - functional programming interface
 * @export
 */
export const SymptomsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new
         * @param {number} patientId ID patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewSymptoms(patientId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = SymptomsApiAxiosParamCreator(configuration).addNewSymptoms(patientId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SymptomsApi - factory interface
 * @export
 */
export const SymptomsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Add a new
         * @param {number} patientId ID patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewSymptoms(patientId: number, options?: any): AxiosPromise<void> {
            return SymptomsApiFp(configuration).addNewSymptoms(patientId, options)(axios, basePath);
        },
    };
};

/**
 * SymptomsApi - object-oriented interface
 * @export
 * @class SymptomsApi
 * @extends {BaseAPI}
 */
export class SymptomsApi extends BaseAPI {
    /**
     * 
     * @summary Add a new
     * @param {number} patientId ID patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SymptomsApi
     */
    public addNewSymptoms(patientId: number, options?: any) {
        return SymptomsApiFp(this.configuration).addNewSymptoms(patientId, options)(this.axios, this.basePath);
    }

}



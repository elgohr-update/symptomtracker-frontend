// tslint:disable
/**
 * Symptom Tracker Patient API
 * This is the Patient\'s Client API for the Symptom Tracker 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface PatientCreateRequest
 */
export interface PatientCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof PatientCreateRequest
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof PatientCreateRequest
     */
    age: number;
    /**
     * 
     * @type {string}
     * @memberof PatientCreateRequest
     */
    gender: string;
    /**
     * 
     * @type {string}
     * @memberof PatientCreateRequest
     */
    city: string;
}
/**
 * 
 * @export
 * @interface PatientModel
 */
export interface PatientModel {
    /**
     * 
     * @type {number}
     * @memberof PatientModel
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PatientModel
     */
    linkedCode?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientModel
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof PatientModel
     */
    age?: number;
    /**
     * 
     * @type {string}
     * @memberof PatientModel
     */
    gender?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientModel
     */
    city?: string;
    /**
     * 
     * @type {Array<RelatedAttribute>}
     * @memberof PatientModel
     */
    relatedAttributes?: Array<RelatedAttribute>;
    /**
     * 
     * @type {Array<SymptomJourneyModel>}
     * @memberof PatientModel
     */
    symptomJourney?: Array<SymptomJourneyModel>;
}
/**
 * 
 * @export
 * @interface RelatedAttribute
 */
export interface RelatedAttribute {
    /**
     * 
     * @type {string}
     * @memberof RelatedAttribute
     */
    Type?: string;
    /**
     * 
     * @type {string}
     * @memberof RelatedAttribute
     */
    Value?: string;
}
/**
 * 
 * @export
 * @interface SymptomCatalogueItem
 */
export interface SymptomCatalogueItem {
    /**
     * 
     * @type {string}
     * @memberof SymptomCatalogueItem
     */
    Category: string;
    /**
     * 
     * @type {string}
     * @memberof SymptomCatalogueItem
     */
    description?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SymptomCatalogueItem
     */
    symptomSeverity: Array<string>;
}
/**
 * 
 * @export
 * @interface SymptomJourneyModel
 */
export interface SymptomJourneyModel {
    /**
     * 
     * @type {string}
     * @memberof SymptomJourneyModel
     */
    Category: string;
    /**
     * 
     * @type {string}
     * @memberof SymptomJourneyModel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SymptomJourneyModel
     */
    symptomSeverity: string;
    /**
     * 
     * @type {string}
     * @memberof SymptomJourneyModel
     */
    comment?: string;
    /**
     * 
     * @type {string}
     * @memberof SymptomJourneyModel
     */
    createdAt?: string;
}

/**
 * PatientApi - axios parameter creator
 * @export
 */
export const PatientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new patient
         * @param {PatientCreateRequest} body Describing the new patient
         * @param {number} [invitationCode] Invitation Code of the Health Department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPatient(body: PatientCreateRequest, invitationCode?: number, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addNewPatient.');
            }
            const localVarPath = `/patient`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (invitationCode !== undefined) {
                localVarQueryParameter['invitationCode'] = invitationCode;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a corresponding patient
         * @param {number} patientId Id of the Patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatient(patientId: number, options: any = {}): RequestArgs {
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling getPatient.');
            }
            const localVarPath = `/patient/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch a current Patient
         * @param {number} patientId Id of the Patient
         * @param {PatientModel} body Representation of the current patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPatient(patientId: number, body: PatientModel, options: any = {}): RequestArgs {
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling patchPatient.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchPatient.');
            }
            const localVarPath = `/patient/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientApi - functional programming interface
 * @export
 */
export const PatientApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new patient
         * @param {PatientCreateRequest} body Describing the new patient
         * @param {number} [invitationCode] Invitation Code of the Health Department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPatient(body: PatientCreateRequest, invitationCode?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientModel> {
            const localVarAxiosArgs = PatientApiAxiosParamCreator(configuration).addNewPatient(body, invitationCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get a corresponding patient
         * @param {number} patientId Id of the Patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatient(patientId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientModel> {
            const localVarAxiosArgs = PatientApiAxiosParamCreator(configuration).getPatient(patientId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Patch a current Patient
         * @param {number} patientId Id of the Patient
         * @param {PatientModel} body Representation of the current patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPatient(patientId: number, body: PatientModel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientModel> {
            const localVarAxiosArgs = PatientApiAxiosParamCreator(configuration).patchPatient(patientId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PatientApi - factory interface
 * @export
 */
export const PatientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create new patient
         * @param {PatientCreateRequest} body Describing the new patient
         * @param {number} [invitationCode] Invitation Code of the Health Department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewPatient(body: PatientCreateRequest, invitationCode?: number, options?: any): AxiosPromise<PatientModel> {
            return PatientApiFp(configuration).addNewPatient(body, invitationCode, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get a corresponding patient
         * @param {number} patientId Id of the Patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatient(patientId: number, options?: any): AxiosPromise<PatientModel> {
            return PatientApiFp(configuration).getPatient(patientId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Patch a current Patient
         * @param {number} patientId Id of the Patient
         * @param {PatientModel} body Representation of the current patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPatient(patientId: number, body: PatientModel, options?: any): AxiosPromise<PatientModel> {
            return PatientApiFp(configuration).patchPatient(patientId, body, options)(axios, basePath);
        },
    };
};

/**
 * PatientApi - object-oriented interface
 * @export
 * @class PatientApi
 * @extends {BaseAPI}
 */
export class PatientApi extends BaseAPI {
    /**
     * 
     * @summary Create new patient
     * @param {PatientCreateRequest} body Describing the new patient
     * @param {number} [invitationCode] Invitation Code of the Health Department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public addNewPatient(body: PatientCreateRequest, invitationCode?: number, options?: any) {
        return PatientApiFp(this.configuration).addNewPatient(body, invitationCode, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get a corresponding patient
     * @param {number} patientId Id of the Patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public getPatient(patientId: number, options?: any) {
        return PatientApiFp(this.configuration).getPatient(patientId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Patch a current Patient
     * @param {number} patientId Id of the Patient
     * @param {PatientModel} body Representation of the current patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public patchPatient(patientId: number, body: PatientModel, options?: any) {
        return PatientApiFp(this.configuration).patchPatient(patientId, body, options)(this.axios, this.basePath);
    }

}


/**
 * QuestionaireApi - axios parameter creator
 * @export
 */
export const QuestionaireApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get catalogue questsions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogueItems(options: any = {}): RequestArgs {
            const localVarPath = `/catalogue`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuestionaireApi - functional programming interface
 * @export
 */
export const QuestionaireApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get catalogue questsions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogueItems(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SymptomCatalogueItem>> {
            const localVarAxiosArgs = QuestionaireApiAxiosParamCreator(configuration).getCatalogueItems(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * QuestionaireApi - factory interface
 * @export
 */
export const QuestionaireApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary get catalogue questsions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogueItems(options?: any): AxiosPromise<Array<SymptomCatalogueItem>> {
            return QuestionaireApiFp(configuration).getCatalogueItems(options)(axios, basePath);
        },
    };
};

/**
 * QuestionaireApi - object-oriented interface
 * @export
 * @class QuestionaireApi
 * @extends {BaseAPI}
 */
export class QuestionaireApi extends BaseAPI {
    /**
     * 
     * @summary get catalogue questsions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionaireApi
     */
    public getCatalogueItems(options?: any) {
        return QuestionaireApiFp(this.configuration).getCatalogueItems(options)(this.axios, this.basePath);
    }

}


/**
 * SymptomsApi - axios parameter creator
 * @export
 */
export const SymptomsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new
         * @param {number} patientId ID patient
         * @param {Array<SymptomJourneyModel>} body Representation of the current patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewSymptoms(patientId: number, body: Array<SymptomJourneyModel>, options: any = {}): RequestArgs {
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling addNewSymptoms.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addNewSymptoms.');
            }
            const localVarPath = `/patient/{patientId}/symptom`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Symptoms
         * @param {number} patientId ID patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSymptoms(patientId: number, options: any = {}): RequestArgs {
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling getAllSymptoms.');
            }
            const localVarPath = `/patient/{patientId}/symptom`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SymptomsApi - functional programming interface
 * @export
 */
export const SymptomsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new
         * @param {number} patientId ID patient
         * @param {Array<SymptomJourneyModel>} body Representation of the current patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewSymptoms(patientId: number, body: Array<SymptomJourneyModel>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = SymptomsApiAxiosParamCreator(configuration).addNewSymptoms(patientId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Symptoms
         * @param {number} patientId ID patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSymptoms(patientId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SymptomJourneyModel>> {
            const localVarAxiosArgs = SymptomsApiAxiosParamCreator(configuration).getAllSymptoms(patientId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SymptomsApi - factory interface
 * @export
 */
export const SymptomsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Add a new
         * @param {number} patientId ID patient
         * @param {Array<SymptomJourneyModel>} body Representation of the current patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewSymptoms(patientId: number, body: Array<SymptomJourneyModel>, options?: any): AxiosPromise<void> {
            return SymptomsApiFp(configuration).addNewSymptoms(patientId, body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get Symptoms
         * @param {number} patientId ID patient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSymptoms(patientId: number, options?: any): AxiosPromise<Array<SymptomJourneyModel>> {
            return SymptomsApiFp(configuration).getAllSymptoms(patientId, options)(axios, basePath);
        },
    };
};

/**
 * SymptomsApi - object-oriented interface
 * @export
 * @class SymptomsApi
 * @extends {BaseAPI}
 */
export class SymptomsApi extends BaseAPI {
    /**
     * 
     * @summary Add a new
     * @param {number} patientId ID patient
     * @param {Array<SymptomJourneyModel>} body Representation of the current patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SymptomsApi
     */
    public addNewSymptoms(patientId: number, body: Array<SymptomJourneyModel>, options?: any) {
        return SymptomsApiFp(this.configuration).addNewSymptoms(patientId, body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get Symptoms
     * @param {number} patientId ID patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SymptomsApi
     */
    public getAllSymptoms(patientId: number, options?: any) {
        return SymptomsApiFp(this.configuration).getAllSymptoms(patientId, options)(this.axios, this.basePath);
    }

}


